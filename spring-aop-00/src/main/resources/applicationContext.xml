<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">


<!--    注册bean-->
    <bean id="userService" class="com.itlucky.service.impl.UserServiceImpl"/>

    <bean id="log" class="com.itlucky.log.Log"/>
    <bean id="afterLog" class="com.itlucky.log.AfterLog"/>


<!--    方式一：使用原生的Spring API接口-->

<!--&lt;!&ndash;    配置aop，需要导入aop的约束&ndash;&gt;-->
<!--    <aop:config>-->
<!--&lt;!&ndash;        切入点   expression:表达式，execution(要执行的位置 * * * * *)&ndash;&gt;-->
<!--        <aop:pointcut id="pointcut" expression="execution(* com.itlucky.service.impl.UserServiceImpl..*(..))"/>-->
<!--&lt;!&ndash;        执行环绕增强&ndash;&gt;-->
<!--        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>-->
<!--        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>-->

<!--    </aop:config>-->

<!--    方式二：自定义类-->
<!--    <bean id="diy" class="com.itlucky.diy.MyPointCut"/>-->
<!--    -->
<!--    <aop:config>-->
<!--&lt;!&ndash;       aop:aspect 自定义切面，ref要引用的类。 aop切面的理解其实就是一个类 &ndash;&gt;-->
<!--        <aop:aspect ref="diy">-->
<!--&lt;!&ndash;            切入点&ndash;&gt;-->
<!--            <aop:pointcut id="pointcut" expression="execution(* com.itlucky.service.impl.UserServiceImpl.*(..))"/>-->
<!--&lt;!&ndash;            通知  切入点方法执行前要做的动作&ndash;&gt;-->
<!--            <aop:before method="begin" pointcut-ref="pointcut"/>-->
<!--&lt;!&ndash;            切入点方法执行后要做的动作&ndash;&gt;-->
<!--            <aop:after method="endd" pointcut-ref="pointcut"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->

<!--    方式三：注解实现AOP-->
    <bean id="annoPointCut" class="com.itlucky.diy.AnnoPointCut"/>
<!--    开启aop注解支持！ Spring动态代理的实现方式： JDK(默认 proxy-target-class="false") cglib(proxy-target-class="true")-->
    <aop:aspectj-autoproxy  proxy-target-class="false"/>

</beans>